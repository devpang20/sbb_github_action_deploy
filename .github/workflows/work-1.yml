
name: 'work-1'

# 트리거를 수행할 브랜치를 지정합니다.
on:
  push:
    branches: [ main ]

permissions:
  contents: read

# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/sbb_github_action_deploy
  VERSION: ${{ github.sha }}
  NAME: go_cicd

jobs:
  build:
    name: 빌드
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: jdk 19 설치
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'temurin'
          cache: 'gradle'
      - name: gradlew 실행 권한 부여
        run: chmod +x gradlew
      - name: gradle 빌드
        run: ./gradlew build -x test --no-daemon
      - name: build 폴더를 캐시에 저장
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: build
          retention-days: 1
  docker:
    name: 도커 이미지 빌드와 푸시
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: build 가져오기
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: build
      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2
      - name: ghcr.io 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'
      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [ self-hosted, label-go ] 
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 8011:8080 --name go_cicd --restart always ${{ env.DOCKER_IMAGE }}:latest
